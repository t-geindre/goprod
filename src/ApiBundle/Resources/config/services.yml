services:
    # Doctrine repositories
    api_bundle.repository:
        class: "Doctrine\\ORM\\EntityRepository"
        factory: ["@doctrine.orm.entity_manager", getRepository]
        abstract: true

    api_bundle.repository.user:
        parent: api_bundle.repository
        arguments:
            - "ApiBundle\\Entity\\User"

    api_bundle.repository.deploy:
        parent: api_bundle.repository
        arguments:
            - "ApiBundle\\Entity\\Deploy"

    # Entities managers
    api_bundle.manager.deploy:
        class: "ApiBundle\\Manager\\DeployManager"
        arguments:
            - "@api_bundle.repository.deploy"
            - "@api_bundle.github_client"
            - "@api_bundle.golive_client"
            - "%api_bundle.golive.stage%"
            - "@doctrine.orm.entity_manager"

    # Listeners
    api_bundle.listener.github.user.login:
        class: "ApiBundle\\Listener\\User\\UserLogin"
        arguments:
            - "@api_bundle.repository.user"
            - "@doctrine.orm.entity_manager"
        tags:
            -
                name: "kernel.event_listener"
                event: "github.client.user.login"
                method: "onUserLogin"

    api_bundle.listener.kernel.view:
        class: "ApiBundle\\Listener\\Kernel\\KernelView"
        arguments:
            - "@serializer"
        tags:
            -
                name: "kernel.event_listener"
                event: "kernel.view"
                method: "onKernelView"

    api_bundle.listener.doctrine.deploy:
        class: "ApiBundle\\Listener\\Doctrine\\Deploy"
        # Inject container to avoid circular dependency with EM
        arguments: [ "@service_container"]
        tags:
            -
                name: "doctrine.event_listener"
                event: "preUpdate"
            -
                name: "kernel.event_listener"
                event: "kernel.terminate"
                method: "updateQueues"

    # External services clients
    api_bundle.github_client:
        class: "ApiBundle\\Service\\Github\\Client"
        arguments:
            - "@buzz"
            - "%api_bundle.github.urls.site%"
            - "%api_bundle.github.urls.api%"
            - "%api_bundle.github.client_id%"
            - "%api_bundle.github.client_secret%"
            - ~
            - "@event_dispatcher"
        tags:
            - { name: "api_bundle.tokenify", property: "accessToken", required: true }
            - { name: "api_bundle.another", property: "accessToken", required: true }

    api_bundle.golive_client:
        class: "ApiBundle\\Service\\Golive\\Client"
        arguments:
            - "@buzz"
            - "%api_bundle.golive.urls.api%"
        tags:
            - { name: "api_bundle.tokenify", property: "goliveKey", required: true }

    # Misc
    api_bundle.serializer.form.error:
        class: "ApiBundle\\Form\\Serializer\\ErrorsSerializer"

    api_bundle.validator.goliveapikey:
        class: "ApiBundle\\Validator\\Constraints\\GoliveApiKeyValidator"
        calls:
            - [ "setClient", ["@api_bundle.golive_client"]]
        tags:
            - { name: validator.constraint_validator }

    api_bundle.token_authenticator:
        class: "ApiBundle\\Security\\TokenAuthenticator"

    api_bundle.tokenifier.factory:
        class: "ApiBundle\\Service\\AccessToken\\AccessTokenAwareFactory"
        arguments: ["@security.token_storage"]

